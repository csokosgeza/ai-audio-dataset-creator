import asyncio
import sys

# Asyncio event loop policy be√°ll√≠t√°sa Windows-ra (Python 3.8+)
if sys.platform == "win32" and sys.version_info >= (3, 8, 0):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

import streamlit as st
import yaml
import os
import torch  # A torch.cuda.is_available() ellen≈ërz√©shez
import shutil  # Almapp√°k t√∂rl√©s√©hez (opcion√°lis)
import datetime  # Egyedi mappa nevekhez

# Import√°ljuk a megl√©v≈ë moduljaink f≈ë funkci√≥it
try:
    from extract_audio import process_media_file, check_ffmpeg
    from isolate_vocals import isolate_vocals_with_demucs
    from transcribe_segment import transcribe_and_segment
except ImportError as e:
    st.error(
        f"Hiba a modulok import√°l√°sakor: {e}. Gy≈ëz≈ëdj meg r√≥la, hogy az `extract_audio.py`, `isolate_vocals.py`, √©s `transcribe_segment.py` f√°jlok ugyanabban a mapp√°ban vannak, mint az `app.py`, √©s a virtu√°lis k√∂rnyezet akt√≠v a sz√ºks√©ges csomagokkal.")
    st.stop()

# === Alap Streamlit Be√°ll√≠t√°sok ===
st.set_page_config(page_title="AI Dataset Creator", layout="wide", initial_sidebar_state="expanded")
st.title("üéôÔ∏è AI Audio Dataset Creator üéûÔ∏è")
st.markdown(
    "K√©sz√≠ts adathalmazt vide√≥kb√≥l AI modellek (pl. TTS, RVC) tan√≠t√°s√°hoz. A folyamat kinyeri a hangot, opcion√°lisan elt√°vol√≠tja a h√°tt√©rzajt, sz√©tv√°lasztja a besz√©l≈ëket, majd r√∂vid szegmensekre bontja √©s √°t√≠rja a besz√©det.")

# === Konfigur√°ci√≥ Kezel√©se ===
CONFIG_PATH = 'config.yaml'


def load_default_config():
    if not os.path.exists(CONFIG_PATH):
        st.error(
            f"Alap√©rtelmezett konfigur√°ci√≥s f√°jl ({CONFIG_PATH}) nem tal√°lhat√≥! Hozz l√©tre egyet a `config.example.yaml` alapj√°n, vagy mentsd el a be√°ll√≠t√°sokat az oldals√°von.")
        return {
            'input_path': 'data/', 'output_base_dir': 'output',
            'output_raw_audio_filename': 'audio_raw.wav', 'output_clean_audio_filename': 'audio_clean.wav',
            'output_segments_dirname': 'segments', 'output_metadata_filename': 'metadata.csv',
            'target_sample_rate': 24000, 'language': 'hu', 'whisper_model_size': 'large-v3-turbo',
            'min_segment_duration_ms': 3000, 'max_segment_duration_ms': 13000,
            'use_demucs': True, 'use_diarization': True,
            'huggingface_token': 'YOUR_HUGGINGFACE_TOKEN_HERE',
            'confidence_threshold': 0.7, 'device': 'auto',
            'output_dir_structure': 'speaker_separated'
        }
    try:
        with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    except Exception as e:
        st.error(f"Hiba az alap√©rtelmezett konfigur√°ci√≥ olvas√°sa k√∂zben: {e}")
        return {}


def save_current_config_to_yaml(current_config, path=CONFIG_PATH):
    try:
        with open(path, 'w', encoding='utf-8') as f:
            yaml.dump(current_config, f, sort_keys=False, allow_unicode=True, Dumper=yaml.SafeDumper)
        st.sidebar.success(f"Konfigur√°ci√≥ mentve ide: {os.path.abspath(path)}")
    except Exception as e:
        st.sidebar.error(f"Hiba a konfigur√°ci√≥ ment√©se k√∂zben: {e}")


config_defaults = load_default_config()
if not config_defaults:
    st.warning(
        "Nem siker√ºlt bet√∂lteni a config.yaml f√°jlt. Alap√©rtelmezett √©rt√©kekkel pr√≥b√°lkozunk, de mentsd el a be√°ll√≠t√°saidat!")
    config_defaults = {
        'input_video': 'data/', 'output_base_dir': 'output',
        'output_raw_audio_filename': 'audio_raw.wav', 'output_clean_audio_filename': 'audio_clean.wav',
        'output_segments_dirname': 'segments', 'output_metadata_filename': 'metadata.csv',
        'target_sample_rate': 24000, 'language': 'hu', 'whisper_model_size': 'large-v3-turbo',
        'min_segment_duration_ms': 3000, 'max_segment_duration_ms': 13000,
        'use_demucs': True, 'use_diarization': True,
        'huggingface_token': 'YOUR_HUGGINGFACE_TOKEN_HERE',
        'confidence_threshold': 0.7, 'device': 'auto',
        'output_dir_structure': 'speaker_separated'
    }

# === Glob√°lis V√°ltoz√≥k a UI √Ållapothoz ===
base_output_for_datasets = config_defaults.get('output_base_dir', 'output')
os.makedirs(base_output_for_datasets, exist_ok=True)
temp_upload_main_dir = os.path.join(base_output_for_datasets, "temp_uploads")  # Ideiglenes felt√∂lt√©sek mapp√°ja
os.makedirs(temp_upload_main_dir, exist_ok=True)
existing_datasets = [d for d in os.listdir(base_output_for_datasets) if
                     os.path.isdir(os.path.join(base_output_for_datasets, d)) and d != "temp_uploads"]

# === Oldals√°v a Konfigur√°ci√≥hoz ===
with st.sidebar:
    st.header("‚öôÔ∏è Feldolgoz√°si Be√°ll√≠t√°sok")

    # --- Adathalmaz M√≥d ---
    st.subheader("0. Adathalmaz C√©l")
    dataset_mode_options = ("√öj adathalmaz l√©trehoz√°sa", "Megl√©v≈ë adathalmazhoz ad√°s")

    if 'dataset_mode_radio_state' not in st.session_state:
        st.session_state.dataset_mode_radio_state = dataset_mode_options[0]

    # Ha nincs megl√©v≈ë adathalmaz, √©s a "Megl√©v≈ëh√∂z ad√°s" van kiv√°lasztva, automatikusan v√°ltson "√öj"-ra
    if not existing_datasets and st.session_state.dataset_mode_radio_state == dataset_mode_options[1]:
        st.session_state.dataset_mode_radio_state = dataset_mode_options[0]
        # Nem h√≠vunk rerun-t itt, a radio widget indexe majd friss√ºl

    current_radio_index = dataset_mode_options.index(st.session_state.dataset_mode_radio_state)

    dataset_mode = st.radio(
        "V√°lassz feldolgoz√°si m√≥dot:",
        dataset_mode_options,
        index=current_radio_index,  # Az aktu√°lis session state alapj√°n
        key="dataset_mode_radio_state_widget"  # M√°sik kulcs, hogy ne √ºtk√∂zz√∂n a state-tel
    )
    # Friss√≠tj√ºk a session state-et a widget aktu√°lis √©rt√©k√©vel (ha v√°ltozott)
    st.session_state.dataset_mode_radio_state = dataset_mode

    target_dataset_name_ui = ""
    new_dataset_name_suggestion = f"dataset_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}"

    if st.session_state.dataset_mode_radio_state == "√öj adathalmaz l√©trehoz√°sa":
        target_dataset_name_ui = st.text_input("√öj adathalmaz neve:", value=new_dataset_name_suggestion,
                                               key="new_dataset_name_input")
    else:  # Megl√©v≈ë adathalmazhoz ad√°s
        if not existing_datasets:  # Ezt az esetet a radio gombnak m√°r kezelnie kellett volna
            st.warning(f"Nincsenek megl√©v≈ë adathalmazok. K√©rlek, v√°lts \"√öj adathalmaz l√©trehoz√°sa\" m√≥dra.")
            target_dataset_name_ui = ""  # Nincs mit kiv√°lasztani
        else:
            selected_existing_dataset = st.selectbox(
                "V√°lassz megl√©v≈ë adathalmazt:",
                options=existing_datasets,
                index=0 if existing_datasets else None,  # Csak akkor van index, ha van opci√≥
                key="existing_dataset_select_box"
            )
            target_dataset_name_ui = selected_existing_dataset if selected_existing_dataset else ""

    # --- Bemenet ---
    # ... (t√∂bbi UI elem v√°ltozatlan) ...
    st.subheader("1. Bemenet")
    uploaded_files = st.file_uploader(
        "Vide√≥/hangf√°jl(ok) felt√∂lt√©se:", type=['mp4', 'mkv', 'mov', 'avi', 'webm', 'mp3', 'wav', 'flac', 'm4a'], # V√°ltoz√°s: audio form√°tumok hozz√°adva
        accept_multiple_files=True, key="file_uploader_widget"
    )
    input_path_ui = st.text_input( # V√°ltoz√°s: input_video_path_ui -> input_path_ui
        "Vagy add meg a m√©diaf√°jl/mappa el√©r√©si √∫tj√°t:", # V√°ltoz√°s: vide√≥f√°jl -> m√©diaf√°jl
        value=config_defaults.get('input_path', 'data/'), key="path_input_widget" # V√°ltoz√°s: input_video -> input_path
    )

    st.subheader("3. Audio Param√©terek")
    target_sr_ui = st.selectbox(
        "C√©l mintav√©telez√©si frekvencia (Hz):", options=[16000, 22050, 24000, 44100, 48000],
        index=[16000, 22050, 24000, 44100, 48000].index(config_defaults.get('target_sample_rate', 24000)),
        key="sample_rate_select"
    )
    language_ui = st.text_input("Nyelv (ISO k√≥d, pl. 'hu', 'en'):", value=config_defaults.get('language', 'hu'),
                                key="language_input")

    st.subheader("4. Whisper Modell")
    whisper_model_size_ui = st.selectbox(
        "Whisper modell m√©rete:", options=["tiny", "base", "small", "medium", "large-v1", "large-v2", "large-v3-turbo"],
        index=["tiny", "base", "small", "medium", "large-v1", "large-v2", "large-v3-turbo"].index(
            config_defaults.get('whisper_model_size', 'large-v3-turbo')), key="whisper_model_select"
    )

    st.subheader("5. Szegment√°l√°s")
    min_dur_ms_ui = st.number_input("Minimum szegmenshossz (ms):", min_value=500, max_value=30000,
                                    value=config_defaults.get('min_segment_duration_ms', 3000), step=100,
                                    key="min_duration_input")
    max_dur_ms_ui = st.number_input("Maximum szegmenshossz (ms):", min_value=1000, max_value=60000,
                                    value=config_defaults.get('max_segment_duration_ms', 13000), step=100,
                                    key="max_duration_input")

    st.subheader("6. Opcion√°lis Funkci√≥k")
    use_demucs_ui = st.checkbox("Vok√°l izol√°ci√≥ (Demucs)", value=config_defaults.get('use_demucs', True),
                                key="use_demucs_checkbox")
    use_diarization_ui = st.checkbox("Besz√©l≈ëk sz√©tv√°laszt√°sa (Diariz√°ci√≥)",
                                     value=config_defaults.get('use_diarization', True), key="use_diarization_checkbox")
    hf_token_ui = st.text_input("Hugging Face Token (diariz√°ci√≥hoz):",
                                value=config_defaults.get('huggingface_token', 'YOUR_HUGGINGFACE_TOKEN_HERE'),
                                type="password", key="hf_token_input")

    st.subheader("7. Min≈ës√©g √©s Eszk√∂z")
    confidence_threshold_ui = st.slider("Konfidencia k√ºsz√∂b (√°tirat ellen≈ërz√©shez):", min_value=0.0, max_value=1.0,
                                        value=config_defaults.get('confidence_threshold', 0.7), step=0.05,
                                        key="confidence_slider")

    device_options = ["auto", "cpu"]
    default_device_index = 0
    if torch.cuda.is_available():
        device_options.append("cuda")
        saved_device = config_defaults.get('device', 'auto')
        if saved_device in device_options: default_device_index = device_options.index(saved_device)
    elif config_defaults.get('device', 'auto') == "cpu":
        default_device_index = device_options.index("cpu")
    device_ui = st.selectbox("Eszk√∂z (CPU/GPU):", options=device_options, index=default_device_index,
                             key="device_select_box")

    if st.button("Jelenlegi be√°ll√≠t√°sok ment√©se config.yaml-ba", key="save_config_sidebar_button"):
        # ... (ment√©si logika v√°ltozatlan)
        current_config_for_save = {
            'input_video': input_path_ui,
            'output_base_dir': base_output_for_datasets,
            'output_raw_audio_filename': config_defaults.get('output_raw_audio_filename'),
            'output_clean_audio_filename': config_defaults.get('output_clean_audio_filename'),
            'output_segments_dirname': config_defaults.get('output_segments_dirname'),
            'output_metadata_filename': config_defaults.get('output_metadata_filename'),
            'target_sample_rate': target_sr_ui,
            'language': language_ui,
            'whisper_model_size': whisper_model_size_ui,
            'min_segment_duration_ms': min_dur_ms_ui,
            'max_segment_duration_ms': max_dur_ms_ui,
            'use_demucs': use_demucs_ui,
            'use_diarization': use_diarization_ui,
            'huggingface_token': hf_token_ui,
            'confidence_threshold': confidence_threshold_ui,
            'device': device_ui,
            'output_dir_structure': 'speaker_separated' if use_diarization_ui else 'flat'
        }
        save_current_config_to_yaml(current_config_for_save)

# === F≈ë Tartalom - Feldolgoz√°s Ind√≠t√°sa ===
st.markdown("---")

# A v√©gleges adathalmaz nev√©nek meghat√°roz√°sa a widgetek aktu√°lis √°llapot√°b√≥l
final_target_dataset_name = ""
if st.session_state.dataset_mode_radio_state_widget == "√öj adathalmaz l√©trehoz√°sa":
    final_target_dataset_name = st.session_state.get("new_dataset_name_input", new_dataset_name_suggestion)
    # Ha a fallback input mez≈ë volt akt√≠v (mert nem volt megl√©v≈ë dataset)
    if not existing_datasets and "new_dataset_name_if_none_exist_for_existing_mode" in st.session_state:
        final_target_dataset_name = st.session_state.new_dataset_name_if_none_exist_for_existing_mode
elif existing_datasets and "existing_dataset_select_box" in st.session_state:  # Csak akkor, ha van mit kiv√°lasztani
    final_target_dataset_name = st.session_state.existing_dataset_select_box
# Ha "Megl√©v≈ë" van kiv√°lasztva, de nincs megl√©v≈ë (√©s a fallback inputot haszn√°ljuk)
elif not existing_datasets and "new_dataset_name_if_none_exist_for_existing_mode" in st.session_state:
    final_target_dataset_name = st.session_state.new_dataset_name_if_none_exist_for_existing_mode

process_button_disabled = not final_target_dataset_name or not final_target_dataset_name.strip()
button_tooltip = "K√©rlek, adj meg/v√°lassz egy adathalmaz nevet az oldals√°von!" if process_button_disabled else "Ind√≠tsd el az √∂sszes vide√≥ feldolgoz√°s√°t a be√°ll√≠tott adathalmazhoz."

if st.button("üöÄ Teljes Feldolgoz√°s Ind√≠t√°sa", type="primary", use_container_width=True,
             key="start_processing_main_button", disabled=process_button_disabled, help=button_tooltip):
    # ... (a feldolgoz√°si logika innen v√°ltozatlan, ahogy az el≈ëz≈ë v√°laszban volt) ...
    actual_output_dataset_dir = os.path.join(base_output_for_datasets, final_target_dataset_name)
    os.makedirs(actual_output_dataset_dir, exist_ok=True)
    st.info(f"Kimenetek ment√©se a k√∂vetkez≈ë adathalmaz mapp√°ba: **{os.path.abspath(actual_output_dataset_dir)}**")

    runtime_config = {
        'output_base_dir': actual_output_dataset_dir,
        'output_raw_audio_filename': config_defaults.get('output_raw_audio_filename', 'audio_raw.wav'),
        'output_clean_audio_filename': config_defaults.get('output_clean_audio_filename', 'audio_clean.wav'),
        'output_segments_dirname': config_defaults.get('output_segments_dirname', 'segments'),
        'output_metadata_filename': config_defaults.get('output_metadata_filename', 'metadata.csv'),
        'target_sample_rate': target_sr_ui, 'language': language_ui,
        'whisper_model_size': whisper_model_size_ui,
        'min_segment_duration_ms': min_dur_ms_ui, 'max_segment_duration_ms': max_dur_ms_ui,
        'use_demucs': use_demucs_ui, 'use_diarization': use_diarization_ui,
        'huggingface_token': hf_token_ui if hf_token_ui and hf_token_ui.strip() and hf_token_ui != 'YOUR_HUGGINGFACE_TOKEN_HERE' else None,
        'confidence_threshold': confidence_threshold_ui, 'device': device_ui,
        'output_dir_structure': 'speaker_separated' if use_diarization_ui else 'flat'
    }

    media_to_process = [] # V√°ltoz√°s: videos_to_process -> media_to_process
    temp_uploaded_paths = []

    if uploaded_files:
        for uploaded_file in uploaded_files:
            temp_media_path = os.path.join(temp_upload_main_dir, uploaded_file.name) # V√°ltoz√°s
            with open(temp_media_path, "wb") as f: f.write(uploaded_file.getbuffer())
            media_to_process.append(temp_media_path) # V√°ltoz√°s
            temp_uploaded_paths.append(temp_media_path)
        st.info(f"{len(uploaded_files)} f√°jl felt√∂ltve feldolgoz√°sra.")
    elif input_path_ui and input_path_ui.strip(): # V√°ltoz√°s
        path_to_check = input_path_ui # V√°ltoz√°s
        if not os.path.isabs(path_to_check): path_to_check = os.path.abspath(path_to_check)
        if os.path.isdir(path_to_check):
            st.info(f"M√©diaf√°jlok rekurz√≠v keres√©se a '{path_to_check}' mapp√°ban √©s almapp√°iban...")
            supported_extensions = ('.mp4', '.mkv', '.mov', '.avi', '.webm', '.mp3', '.wav', '.flac', '.m4a')
            for root, dirs, files in os.walk(path_to_check):
                for filename in files:
                    if filename.lower().endswith(supported_extensions):
                        media_to_process.append(os.path.join(root, filename))
            
            if not media_to_process:
                st.warning(f"Nem tal√°lhat√≥ak feldolgozhat√≥ m√©diaf√°jlok a '{path_to_check}' mapp√°ban √©s almapp√°iban.")
            else:
                st.info(f"{len(media_to_process)} f√°jl tal√°lhat√≥ a mapp√°ban √©s almapp√°iban.")
        elif os.path.isfile(path_to_check):
            media_to_process.append(path_to_check) # V√°ltoz√°s
        else:
            st.error(f"A megadott el√©r√©si √∫t nem l√©tezik vagy nem t√°mogatott: {path_to_check}"); st.stop()
    else:
        st.error("Nincs m√©diaf√°jl kiv√°lasztva vagy el√©r√©si √∫t megadva."); st.stop() # V√°ltoz√°s

    if not media_to_process: st.error("Nincsenek feldolgozand√≥ f√°jlok."); st.stop() # V√°ltoz√°s

    log_placeholder = st.empty()
    progress_bar_overall = st.progress(0, text="Teljes feldolgoz√°s...")
    all_media_processed_successfully = True # V√°ltoz√°s

    for media_index, current_media_path in enumerate(media_to_process): # V√°ltoz√°s
        media_basename = os.path.basename(current_media_path) # V√°ltoz√°s
        log_placeholder.info(f"Feldolgoz√°s alatt: {media_basename} ({media_index + 1}/{len(media_to_process)})") # V√°ltoz√°s

        safe_media_name = "".join(c if c.isalnum() else "_" for c in os.path.splitext(media_basename)[0]) # V√°ltoz√°s
        media_processing_output_dir = os.path.join(actual_output_dataset_dir, safe_media_name) # V√°ltoz√°s
        os.makedirs(media_processing_output_dir, exist_ok=True)

        media_config = runtime_config.copy() # V√°ltoz√°s
        media_config['input_path'] = current_media_path # V√°ltoz√°s
        media_config['output_base_dir'] = media_processing_output_dir # V√°ltoz√°s
        media_config['output_metadata_file_absolute_path'] = os.path.join(actual_output_dataset_dir,
                                                                          runtime_config['output_metadata_filename'])
        media_config['segments_relative_path_prefix'] = safe_media_name # V√°ltoz√°s

        st.info(f"Indul: {media_basename}") # V√°ltoz√°s
        st.caption(f"Kimenetek (nyers, tiszta, szegmensek) ide: {os.path.abspath(media_config['output_base_dir'])}") # V√°ltoz√°s

        raw_audio_file = None;
        clean_audio_file_for_this_media = None; # V√°ltoz√°s
        input_for_transcription_this_media = None # V√°ltoz√°s
        current_media_success = True # V√°ltoz√°s

        with st.expander(f"[{safe_media_name}] 1. Audio el≈ëk√©sz√≠t√©se...", expanded=True): # V√°ltoz√°s
            if not check_ffmpeg():
                st.error("FFmpeg nem tal√°lhat√≥.");
                current_media_success = False # V√°ltoz√°s
            if current_media_success: # V√°ltoz√°s
                raw_audio_file = process_media_file(media_config) # V√°ltoz√°s
                if raw_audio_file:
                    st.success(f"Nyers audio: {os.path.basename(raw_audio_file)}")
                else:
                    st.error("Audio el≈ëk√©sz√≠t√©s sikertelen."); current_media_success = False # V√°ltoz√°s

        if current_media_success and media_config['use_demucs']: # V√°ltoz√°s
            with st.expander(f"[{safe_media_name}] 2. Vok√°l izol√°ci√≥ (Demucs)...", expanded=True): # V√°ltoz√°s
                clean_audio_file_for_this_media = isolate_vocals_with_demucs(media_config, raw_audio_file) # V√°ltoz√°s
                if clean_audio_file_for_this_media:
                    st.success(f"Tiszta vok√°l: {os.path.basename(clean_audio_file_for_this_media)}")
                    input_for_transcription_this_media = clean_audio_file_for_this_media # V√°ltoz√°s
                else:
                    st.warning("Demucs hiba. Nyers audi√≥ haszn√°lata.")
                    input_for_transcription_this_media = raw_audio_file # V√°ltoz√°s
        elif current_media_success: # V√°ltoz√°s
            st.info(f"[{safe_media_name}] Demucs kihagyva.") # V√°ltoz√°s
            input_for_transcription_this_media = raw_audio_file # V√°ltoz√°s

        if current_media_success and input_for_transcription_this_media: # V√°ltoz√°s
            with st.expander(f"[{safe_media_name}] 3. Transzkripci√≥ √©s szegment√°l√°s...", expanded=True): # V√°ltoz√°s
                st.write(f"WhisperX futtat√°sa: {os.path.basename(input_for_transcription_this_media)}") # V√°ltoz√°s
                transcribe_and_segment(media_config) # V√°ltoz√°s
                st.success("Transzkripci√≥ √©s szegment√°l√°s befejezve ehhez a f√°jlhoz!") # V√°ltoz√°s
        elif current_media_success: # V√°ltoz√°s
            st.error(f"[{safe_media_name}] Nincs audio f√°jl a transzkripci√≥hoz."); # V√°ltoz√°s
            current_media_success = False # V√°ltoz√°s

        if not current_media_success: # V√°ltoz√°s
            all_media_processed_successfully = False # V√°ltoz√°s

        progress_bar_overall.progress((media_index + 1) / len(media_to_process), # V√°ltoz√°s
                                      text=f"F√°jl {media_index + 1}/{len(media_to_process)} feldolgozva.") # V√°ltoz√°s

    if temp_uploaded_paths:
        st.markdown("---");
        st.write("Ideiglenes felt√∂lt√∂tt f√°jlok t√∂rl√©se...")
        for temp_path in temp_uploaded_paths:
            if os.path.exists(temp_path):
                try:
                    os.remove(temp_path); st.caption(f"T√∂r√∂lve: {temp_path}")
                except Exception as e:
                    st.warning(f"Hiba t√∂rl√©skor ({temp_path}): {e}")
        if os.path.exists(temp_upload_main_dir) and not os.listdir(temp_upload_main_dir):
            try:
                shutil.rmtree(temp_upload_main_dir); st.caption(f"Ideiglenes mappa t√∂r√∂lve: {temp_upload_main_dir}")
            except Exception as e:
                st.warning(f"Hiba az ideiglenes mappa t√∂rl√©sekor: {e}")

    st.markdown("---")
    if media_to_process:
        if all_media_processed_successfully:
            st.balloons()
            st.header("üéâ Feldolgoz√°s Befejezve! üéâ")
            st.success(f"Az √∂sszes f√°jl feldolgoz√°sa sikeresen megt√∂rt√©nt.")
        else:
            st.warning(
                "Egy vagy t√∂bb f√°jl feldolgoz√°sa sor√°n hiba t√∂rt√©nt. Ellen≈ërizd a fenti √ºzeneteket √©s a termin√°l logjait.")
        st.write(
            f"A k√∂z√∂s metaadatok (√°tiratok) a `{os.path.abspath(os.path.join(actual_output_dataset_dir, runtime_config['output_metadata_filename']))}` f√°jlban tal√°lhat√≥k.")
        st.write(
            f"A szegment√°lt audio f√°jlok a `{os.path.abspath(actual_output_dataset_dir)}` mapp√°n bel√ºli, vide√≥ nev≈± almapp√°kban (`segments` almapp√°kon bel√ºl) vannak.")
    else:
        st.info("Nem volt feldolgozand√≥ vide√≥.")

with st.sidebar:
    st.markdown("---")
    st.info("Fejlesztette: AI Asszisztens")
