import asyncio
import sys

# Asyncio event loop policy be√°ll√≠t√°sa Windows-ra (Python 3.8+)
if sys.platform == "win32" and sys.version_info >= (3, 8, 0):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

import streamlit as st
import yaml
import os
import torch # A torch.cuda.is_available() ellen≈ërz√©shez
import shutil # Almapp√°k t√∂rl√©s√©hez (opcion√°lis)
import datetime # Egyedi mappa nevekhez

# Import√°ljuk a megl√©v≈ë moduljaink f≈ë funkci√≥it
# Gy≈ëz≈ëdj meg r√≥la, hogy ezek a .py f√°jlok ugyanabban a mapp√°ban vannak, mint az app.py
try:
    from extract_audio import extract_audio_from_video, check_ffmpeg
    from isolate_vocals import isolate_vocals_with_demucs
    from transcribe_segment import transcribe_and_segment
except ImportError as e:
    st.error(f"Hiba a modulok import√°l√°sakor: {e}. Gy≈ëz≈ëdj meg r√≥la, hogy az `extract_audio.py`, `isolate_vocals.py`, √©s `transcribe_segment.py` f√°jlok ugyanabban a mapp√°ban vannak, mint az `app.py`, √©s a virtu√°lis k√∂rnyezet akt√≠v a sz√ºks√©ges csomagokkal.")
    st.stop()


# === Alap Streamlit Be√°ll√≠t√°sok ===
st.set_page_config(page_title="AI Dataset Creator", layout="wide", initial_sidebar_state="expanded")
st.title("üéôÔ∏è AI Audio Dataset Creator üéûÔ∏è")
st.markdown("K√©sz√≠ts adathalmazt vide√≥kb√≥l AI modellek (pl. TTS, RVC) tan√≠t√°s√°hoz. A folyamat kinyeri a hangot, opcion√°lisan elt√°vol√≠tja a h√°tt√©rzajt, sz√©tv√°lasztja a besz√©l≈ëket, majd r√∂vid szegmensekre bontja √©s √°t√≠rja a besz√©det.")

# === Konfigur√°ci√≥ Kezel√©se ===
CONFIG_PATH = 'config.yaml'

def load_default_config():
    """Bet√∂lti az alap√©rtelmezett konfigur√°ci√≥t a YAML f√°jlb√≥l."""
    if not os.path.exists(CONFIG_PATH):
        st.error(f"Alap√©rtelmezett konfigur√°ci√≥s f√°jl ({CONFIG_PATH}) nem tal√°lhat√≥! Hozz l√©tre egyet a megadott strukt√∫r√°val, vagy mentsd el a be√°ll√≠t√°sokat az oldals√°von.")
        return {} # Vagy egy minim√°lis default config
    try:
        with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    except Exception as e:
        st.error(f"Hiba az alap√©rtelmezett konfigur√°ci√≥ olvas√°sa k√∂zben: {e}")
        return {}

def save_current_config_to_yaml(current_config, path=CONFIG_PATH):
    """Elmenti az aktu√°lis UI be√°ll√≠t√°sokat a YAML f√°jlba (fel√ºl√≠rja!)."""
    try:
        with open(path, 'w', encoding='utf-8') as f:
            yaml.dump(current_config, f, sort_keys=False, allow_unicode=True, Dumper=yaml.SafeDumper) # Biztons√°gosabb dumper
        st.sidebar.success(f"Konfigur√°ci√≥ mentve ide: {os.path.abspath(path)}")
    except Exception as e:
        st.sidebar.error(f"Hiba a konfigur√°ci√≥ ment√©se k√∂zben: {e}")

config_defaults = load_default_config()
if not config_defaults:
    st.warning("Nem siker√ºlt bet√∂lteni a config.yaml f√°jlt. Alap√©rtelmezett √©rt√©kekkel pr√≥b√°lkozunk, de mentsd el a be√°ll√≠t√°saidat!")
    # Minim√°lis alap√©rtelmezett √©rt√©kek, ha a f√°jl nem l√©tezik vagy hib√°s
    config_defaults = {
        'input_video': 'data/',
        'output_base_dir': 'output',
        'output_raw_audio_filename': 'audio_raw.wav',
        'output_clean_audio_filename': 'audio_clean.wav',
        'output_segments_dirname': 'segments',
        'output_metadata_filename': 'metadata.csv',
        'target_sample_rate': 24000,
        'language': 'hu',
        'whisper_model_size': 'large-v3-turbo',
        'min_segment_duration_ms': 3000,
        'max_segment_duration_ms': 13000,
        'use_demucs': True,
        'use_diarization': True,
        'huggingface_token': 'YOUR_HUGGINGFACE_TOKEN_HERE',
        'confidence_threshold': 0.7,
        'device': 'auto',
        'output_dir_structure': 'speaker_separated'
    }


# === Oldals√°v a Konfigur√°ci√≥hoz ===
with st.sidebar:
    st.header("‚öôÔ∏è Feldolgoz√°si Be√°ll√≠t√°sok")

    # --- Adathalmaz M√≥d ---
    st.subheader("0. Adathalmaz C√©l")
    dataset_mode = st.radio(
        "V√°lassz feldolgoz√°si m√≥dot:",
        ("√öj adathalmaz l√©trehoz√°sa", "Megl√©v≈ë adathalmazhoz ad√°s"),
        key="dataset_mode_radio"
    )

    base_output_for_datasets = config_defaults.get('output_base_dir', 'output')
    os.makedirs(base_output_for_datasets, exist_ok=True)

    target_dataset_name_ui = "" # Inicializ√°l√°s
    new_dataset_name_suggestion = f"dataset_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}"

    if dataset_mode == "√öj adathalmaz l√©trehoz√°sa":
        target_dataset_name_ui = st.text_input("√öj adathalmaz neve:", value=new_dataset_name_suggestion, key="new_dataset_name")
    else: # Megl√©v≈ë adathalmazhoz ad√°s
        existing_datasets = [d for d in os.listdir(base_output_for_datasets) if os.path.isdir(os.path.join(base_output_for_datasets, d)) and d != "temp_uploads"] # temp_uploads kiz√°r√°sa
        if not existing_datasets:
            st.warning(f"Nincsenek megl√©v≈ë adathalmazok a '{base_output_for_datasets}' mapp√°ban. Hozz l√©tre egy √∫jat!")
            # Automatikusan √°tv√°ltunk "√öj adathalmaz l√©trehoz√°sa" m√≥dra, ha nincs megl√©v≈ë
            st.session_state.dataset_mode_radio = "√öj adathalmaz l√©trehoz√°sa" # UI friss√≠t√©se
            target_dataset_name_ui = st.text_input("√öj adathalmaz neve (mivel nincs megl√©v≈ë):", value=new_dataset_name_suggestion, key="new_dataset_name_fallback")
        else:
            target_dataset_name_ui = st.selectbox("V√°lassz megl√©v≈ë adathalmazt:", options=existing_datasets, key="existing_dataset_select")

    # --- Bemenet ---
    st.subheader("1. Bemenet")
    uploaded_files = st.file_uploader(
        "Vide√≥f√°jl(ok) felt√∂lt√©se:",
        type=['mp4', 'mkv', 'mov', 'avi', 'webm'],
        accept_multiple_files=True,
        key="file_uploader"
    )
    input_video_path_ui = st.text_input(
        "Vagy add meg a vide√≥f√°jl/mappa el√©r√©si √∫tj√°t:",
        value=config_defaults.get('input_video', 'data/'),
        key="path_input"
    )

    # --- Audio Param√©terek ---
    st.subheader("3. Audio Param√©terek")
    target_sr_ui = st.selectbox(
        "C√©l mintav√©telez√©si frekvencia (Hz):",
        options=[16000, 22050, 24000, 44100, 48000],
        index=[16000, 22050, 24000, 44100, 48000].index(config_defaults.get('target_sample_rate', 24000)),
        key="sample_rate"
    )
    language_ui = st.text_input("Nyelv (ISO k√≥d, pl. 'hu', 'en'):", value=config_defaults.get('language', 'hu'), key="language")

    # --- Whisper Modell ---
    st.subheader("4. Whisper Modell")
    whisper_model_size_ui = st.selectbox(
        "Whisper modell m√©rete:",
        options=["tiny", "base", "small", "medium", "large-v1", "large-v2", "large-v3-turbo"],
        index=["tiny", "base", "small", "medium", "large-v1", "large-v2", "large-v3-turbo"].index(config_defaults.get('whisper_model_size', 'large-v3-turbo')),
        key="whisper_model"
    )

    # --- Szegment√°l√°s ---
    st.subheader("5. Szegment√°l√°s")
    min_dur_ms_ui = st.number_input("Minimum szegmenshossz (ms):", min_value=500, max_value=30000, value=config_defaults.get('min_segment_duration_ms', 3000), step=100, key="min_duration")
    max_dur_ms_ui = st.number_input("Maximum szegmenshossz (ms):", min_value=1000, max_value=60000, value=config_defaults.get('max_segment_duration_ms', 13000), step=100, key="max_duration")

    # --- Opcion√°lis Funkci√≥k ---
    st.subheader("6. Opcion√°lis Funkci√≥k")
    use_demucs_ui = st.checkbox("Vok√°l izol√°ci√≥ (Demucs)", value=config_defaults.get('use_demucs', True), key="use_demucs")
    use_diarization_ui = st.checkbox("Besz√©l≈ëk sz√©tv√°laszt√°sa (Diariz√°ci√≥)", value=config_defaults.get('use_diarization', True), key="use_diarization")
    hf_token_ui = st.text_input("Hugging Face Token (diariz√°ci√≥hoz):", value=config_defaults.get('huggingface_token', 'YOUR_HUGGINGFACE_TOKEN_HERE'), type="password", key="hf_token")

    # --- Min≈ës√©g √©s Eszk√∂z ---
    st.subheader("7. Min≈ës√©g √©s Eszk√∂z")
    confidence_threshold_ui = st.slider("Konfidencia k√ºsz√∂b (√°tirat ellen≈ërz√©shez):", min_value=0.0, max_value=1.0, value=config_defaults.get('confidence_threshold', 0.7), step=0.05, key="confidence_threshold")

    device_options = ["auto", "cpu"]
    default_device_index = 0 # Alap√©rtelmezett az 'auto'
    if torch.cuda.is_available():
        device_options.append("cuda")
        # Pr√≥b√°ljuk meg be√°ll√≠tani az alap√©rtelmezettet a config alapj√°n, ha √©rv√©nyes
        saved_device = config_defaults.get('device', 'auto')
        if saved_device in device_options:
            default_device_index = device_options.index(saved_device)
    elif config_defaults.get('device', 'auto') == "cpu": # Ha nincs CUDA, de a config CPU-t mond
         default_device_index = device_options.index("cpu")


    device_ui = st.selectbox(
        "Eszk√∂z (CPU/GPU):",
        options=device_options,
        index=default_device_index,
        key="device_select"
    )

    # === Konfigur√°ci√≥ Ment√©se Gomb ===
    if st.button("Jelenlegi be√°ll√≠t√°sok ment√©se config.yaml-ba", key="save_config_button"):
        current_config_for_save = {
            'input_video': input_video_path_ui,
            'output_base_dir': base_output_for_datasets,
            'output_raw_audio_filename': config_defaults.get('output_raw_audio_filename'),
            'output_clean_audio_filename': config_defaults.get('output_clean_audio_filename'),
            'output_segments_dirname': config_defaults.get('output_segments_dirname'),
            'output_metadata_filename': config_defaults.get('output_metadata_filename'),
            'target_sample_rate': target_sr_ui,
            'language': language_ui,
            'whisper_model_size': whisper_model_size_ui,
            'min_segment_duration_ms': min_dur_ms_ui,
            'max_segment_duration_ms': max_dur_ms_ui,
            'use_demucs': use_demucs_ui,
            'use_diarization': use_diarization_ui,
            'huggingface_token': hf_token_ui,
            'confidence_threshold': confidence_threshold_ui,
            'device': device_ui,
            'output_dir_structure': 'speaker_separated' if use_diarization_ui else 'flat'
        }
        save_current_config_to_yaml(current_config_for_save)

# === F≈ë Tartalom - Feldolgoz√°s Ind√≠t√°sa ===
st.markdown("---")
if st.button("üöÄ Teljes Feldolgoz√°s Ind√≠t√°sa", type="primary", use_container_width=True, key="start_processing_button"):
    if not target_dataset_name_ui or not target_dataset_name_ui.strip():
        st.error("K√©rlek, adj meg egy √©rv√©nyes nevet az √∫j adathalmaznak, vagy v√°lassz egy megl√©v≈ët!")
        st.stop()

    # A t√©nyleges kimeneti mappa az adathalmaz nev√©vel a base_output_for_datasets alatt
    actual_output_dataset_dir = os.path.join(base_output_for_datasets, target_dataset_name_ui)
    os.makedirs(actual_output_dataset_dir, exist_ok=True)
    st.info(f"Kimenetek ment√©se a k√∂vetkez≈ë adathalmaz mapp√°ba: **{os.path.abspath(actual_output_dataset_dir)}**")

    # Aktu√°lis futtat√°si konfigur√°ci√≥ (ezt adjuk √°t a moduloknak)
    runtime_config = {
        'output_base_dir': actual_output_dataset_dir, # Ez lesz az adathalmaz gy√∂kere
        'output_raw_audio_filename': config_defaults.get('output_raw_audio_filename', 'audio_raw.wav'),
        'output_clean_audio_filename': config_defaults.get('output_clean_audio_filename', 'audio_clean.wav'),
        'output_segments_dirname': config_defaults.get('output_segments_dirname', 'segments'),
        'output_metadata_filename': config_defaults.get('output_metadata_filename', 'metadata.csv'), # A k√∂z√∂s CSV neve
        'target_sample_rate': target_sr_ui,
        'language': language_ui,
        'whisper_model_size': whisper_model_size_ui,
        'min_segment_duration_ms': min_dur_ms_ui,
        'max_segment_duration_ms': max_dur_ms_ui,
        'use_demucs': use_demucs_ui,
        'use_diarization': use_diarization_ui,
        'huggingface_token': hf_token_ui if hf_token_ui and hf_token_ui.strip() and hf_token_ui != 'YOUR_HUGGINGFACE_TOKEN_HERE' else None,
        'confidence_threshold': confidence_threshold_ui,
        'device': device_ui,
        'output_dir_structure': 'speaker_separated' if use_diarization_ui else 'flat'
    }

    # Bemeneti vide√≥(k) list√°j√°nak √∂ssze√°ll√≠t√°sa
    videos_to_process = []
    temp_uploaded_paths = [] # Ideiglenesen felt√∂lt√∂tt f√°jlok √∫tvonalai t√∂rl√©shez

    # Ideiglenes felt√∂lt√©si mappa a f≈ë kimeneti mapp√°n bel√ºl
    temp_upload_main_dir = os.path.join(base_output_for_datasets, "temp_uploads")

    if uploaded_files:
        os.makedirs(temp_upload_main_dir, exist_ok=True)
        for uploaded_file in uploaded_files:
            temp_video_path = os.path.join(temp_upload_main_dir, uploaded_file.name)
            with open(temp_video_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            videos_to_process.append(temp_video_path)
            temp_uploaded_paths.append(temp_video_path)
        st.info(f"{len(uploaded_files)} vide√≥ felt√∂ltve feldolgoz√°sra.")
    elif input_video_path_ui and input_video_path_ui.strip():
        path_to_check = input_video_path_ui
        if not os.path.isabs(path_to_check):
            path_to_check = os.path.abspath(path_to_check)

        if os.path.isdir(path_to_check):
            st.info(f"Vide√≥k keres√©se a '{path_to_check}' mapp√°ban...")
            for filename in os.listdir(path_to_check):
                if filename.lower().endswith(('.mp4', '.mkv', '.mov', '.avi', '.webm')):
                    videos_to_process.append(os.path.join(path_to_check, filename))
            if not videos_to_process:
                st.warning(f"Nem tal√°lhat√≥ak vide√≥f√°jlok a '{path_to_check}' mapp√°ban.")
            else:
                st.info(f"{len(videos_to_process)} vide√≥ tal√°lhat√≥ a mapp√°ban.")
        elif os.path.isfile(path_to_check):
            videos_to_process.append(path_to_check)
        else:
            st.error(f"A megadott el√©r√©si √∫t nem l√©tezik vagy nem t√°mogatott: {path_to_check}")
            st.stop()
    else:
        st.error("Nincs vide√≥ kiv√°lasztva vagy el√©r√©si √∫t megadva.")
        st.stop()

    if not videos_to_process:
        st.error("Nincsenek feldolgozand√≥ vide√≥k.")
        st.stop()

    # --- Feldolgoz√°si Ciklus Minden Vide√≥ra ---
    all_videos_processed_successfully = True
    # Hely a logoknak a f≈ëoldalon
    log_placeholder = st.empty()
    progress_bar = st.progress(0)
    total_videos = len(videos_to_process)

    for video_index, current_video_path_original in enumerate(videos_to_process):
        video_basename = os.path.basename(current_video_path_original)
        log_placeholder.info(f"Feldolgoz√°s alatt: {video_basename} ({video_index + 1}/{total_videos})")
        progress_bar.progress((video_index + 1) / total_videos)

        video_name_no_ext = os.path.splitext(video_basename)[0]
        safe_video_name = "".join(c if c.isalnum() else "_" for c in video_name_no_ext)

        # A vide√≥-specifikus kimeneti mappa az ADATHALMAZ mapp√°n BEL√úL j√∂n l√©tre
        # Ez lesz a feldolgoz√≥ szkriptek `output_base_dir`-je
        video_processing_output_dir = os.path.join(actual_output_dataset_dir, safe_video_name)
        os.makedirs(video_processing_output_dir, exist_ok=True)

        # Konfigur√°ci√≥ az aktu√°lis vide√≥hoz
        video_config = runtime_config.copy()
        video_config['input_video'] = current_video_path_original
        video_config['output_base_dir'] = video_processing_output_dir # A szkriptek ide mentik a nyers, tiszta, szegmens f√°jlokat
        # A metadata.csv √∫tvonal√°t a runtime_config-b√≥l vessz√ºk, hogy k√∂z√∂s legyen
        video_config['output_metadata_file_absolute_path'] = os.path.join(actual_output_dataset_dir, runtime_config['output_metadata_filename'])
        # A szegmens f√°jlok relat√≠v √∫tvonal√°nak tartalmaznia kell a vide√≥ nev√©t is
        video_config['segments_relative_path_prefix'] = safe_video_name


        st.info(f"Indul: {video_basename}")
        st.caption(f"Kimenetek (nyers, tiszta, szegmensek) ide: {os.path.abspath(video_config['output_base_dir'])}")

        raw_audio_file = None
        clean_audio_file_for_this_video = None
        input_for_transcription_this_video = None

        # --- 1. Audio Kinyer√©se ---
        with st.expander(f"[{safe_video_name}] 1. Audio kinyer√©se...", expanded=True):
            if not check_ffmpeg():
                st.error("FFmpeg nem tal√°lhat√≥.")
                all_videos_processed_successfully = False; continue
            raw_audio_file = extract_audio_from_video(video_config)
            if raw_audio_file: st.success(f"Nyers audio: {raw_audio_file}")
            else:
                st.error("Audio kinyer√©s sikertelen."); all_videos_processed_successfully = False; continue

        # --- 2. Vok√°l Izol√°ci√≥ (Demucs) ---
        if raw_audio_file:
            if video_config['use_demucs']:
                with st.expander(f"[{safe_video_name}] 2. Vok√°l izol√°ci√≥ (Demucs)...", expanded=True):
                    clean_audio_file_for_this_video = isolate_vocals_with_demucs(video_config, raw_audio_file)
                    if clean_audio_file_for_this_video:
                        st.success(f"Tiszta vok√°l: {clean_audio_file_for_this_video}")
                        input_for_transcription_this_video = clean_audio_file_for_this_video
                    else:
                        st.warning("Demucs hiba. Nyers audi√≥ haszn√°lata.")
                        input_for_transcription_this_video = raw_audio_file
            else:
                st.info("Demucs kihagyva.")
                input_for_transcription_this_video = raw_audio_file

            # --- 3. Transzkripci√≥ √©s Szegment√°l√°s ---
            if input_for_transcription_this_video:
                with st.expander(f"[{safe_video_name}] 3. Transzkripci√≥ √©s szegment√°l√°s...", expanded=True):
                    st.write(f"WhisperX futtat√°sa: {os.path.basename(input_for_transcription_this_video)}")
                    # A transcribe_segment.py-nek a video_config-ot adjuk √°t.
                    # Ennek tartalmaznia kell a 'output_metadata_file_absolute_path' √©s
                    # 'segments_relative_path_prefix' kulcsokat a k√∂z√∂s CSV √©s helyes relat√≠v utakhoz.
                    transcribe_and_segment(video_config)
                    st.success("Transzkripci√≥ √©s szegment√°l√°s befejezve ehhez a vide√≥hoz!")
            else:
                st.error("Nincs audio f√°jl a transzkripci√≥hoz."); all_videos_processed_successfully = False
        else:
            all_videos_processed_successfully = False

    # Ideiglenes felt√∂lt√∂tt vide√≥k t√∂rl√©se
    if temp_uploaded_paths:
        st.markdown("---")
        st.write("Ideiglenes felt√∂lt√∂tt f√°jlok t√∂rl√©se...")
        for temp_path in temp_uploaded_paths:
            if os.path.exists(temp_path):
                try: os.remove(temp_path); st.caption(f"T√∂r√∂lve: {temp_path}")
                except Exception as e: st.warning(f"Hiba t√∂rl√©skor ({temp_path}): {e}")
        # Ideiglenes mappa t√∂rl√©se, ha √ºres
        if os.path.exists(temp_upload_main_dir) and not os.listdir(temp_upload_main_dir):
            try: os.rmdir(temp_upload_main_dir); st.caption(f"Ideiglenes mappa t√∂r√∂lve: {temp_upload_main_dir}")
            except Exception as e: st.warning(f"Hiba az ideiglenes mappa t√∂rl√©sekor: {e}")


    st.markdown("---")
    if all_videos_processed_successfully and videos_to_process:
        st.balloons()
        st.header("üéâ Feldolgoz√°s Befejezve! üéâ")
        st.success(f"Az √∂sszes vide√≥ feldolgoz√°sa sikeresen megt√∂rt√©nt.")
        st.write(f"A k√∂z√∂s metaadatok (√°tiratok) a `{os.path.abspath(os.path.join(actual_output_dataset_dir, runtime_config['output_metadata_filename']))}` f√°jlban tal√°lhat√≥k.")
        st.write(f"A szegment√°lt audio f√°jlok a `{os.path.abspath(actual_output_dataset_dir)}` mapp√°n bel√ºli, vide√≥ nev≈± almapp√°kban (`segments` almapp√°kon bel√ºl) vannak.")
    elif videos_to_process:
        st.warning("Egy vagy t√∂bb vide√≥ feldolgoz√°sa sor√°n hiba t√∂rt√©nt. Ellen≈ërizd a fenti √ºzeneteket.")
    else:
        st.info("Nem volt feldolgozand√≥ vide√≥.")

with st.sidebar:
    st.markdown("---")
    st.info("Fejlesztette: AI Asszisztens")
