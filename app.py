import asyncio
import sys

# Asyncio event loop policy be√°ll√≠t√°sa Windows-ra (Python 3.8+)
if sys.platform == "win32" and sys.version_info >= (3, 8, 0):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

import streamlit as st
import yaml
import os
import torch  # A torch.cuda.is_available() ellen≈ërz√©shez
import shutil  # Almapp√°k t√∂rl√©s√©hez (opcion√°lis)
import datetime  # Egyedi mappa nevekhez

# Import√°ljuk a megl√©v≈ë moduljaink f≈ë funkci√≥it
try:
    from extract_audio import extract_audio_from_video, check_ffmpeg
    from isolate_vocals import isolate_vocals_with_demucs
    from transcribe_segment import transcribe_and_segment
except ImportError as e:
    st.error(
        f"Hiba a modulok import√°l√°sakor: {e}. Gy≈ëz≈ëdj meg r√≥la, hogy az `extract_audio.py`, `isolate_vocals.py`, √©s `transcribe_segment.py` f√°jlok ugyanabban a mapp√°ban vannak, mint az `app.py`, √©s a virtu√°lis k√∂rnyezet akt√≠v a sz√ºks√©ges csomagokkal.")
    st.stop()

# === Alap Streamlit Be√°ll√≠t√°sok ===
st.set_page_config(page_title="AI Dataset Creator", layout="wide", initial_sidebar_state="expanded")
st.title("üéôÔ∏è AI Audio Dataset Creator üéûÔ∏è")
st.markdown(
    "K√©sz√≠ts adathalmazt vide√≥kb√≥l AI modellek (pl. TTS, RVC) tan√≠t√°s√°hoz. A folyamat kinyeri a hangot, opcion√°lisan elt√°vol√≠tja a h√°tt√©rzajt, sz√©tv√°lasztja a besz√©l≈ëket, majd r√∂vid szegmensekre bontja √©s √°t√≠rja a besz√©det.")

# === Konfigur√°ci√≥ Kezel√©se ===
CONFIG_PATH = 'config.yaml'


def load_default_config():
    default_conf = {
        'input_video': 'data/', 'output_base_dir': 'output',
        'output_raw_audio_filename': 'audio_raw.wav', 'output_clean_audio_filename': 'audio_clean.wav',
        'output_segments_dirname': 'segments', 'output_metadata_filename': 'metadata.csv',
        'target_sample_rate': 24000, 'language': 'hu', 'whisper_model_size': 'large-v3-turbo',
        # Itt jav√≠tottam large-v3-turbo-r√≥l
        'min_segment_duration_ms': 3000, 'max_segment_duration_ms': 13000,
        'use_demucs': True, 'use_diarization': True,
        'huggingface_token': 'YOUR_HUGGINGFACE_TOKEN_HERE',
        'confidence_threshold': 0.7, 'device': 'auto',
        'output_dir_structure': 'speaker_separated'
    }
    if not os.path.exists(CONFIG_PATH):
        st.error(
            f"Alap√©rtelmezett konfigur√°ci√≥s f√°jl ({CONFIG_PATH}) nem tal√°lhat√≥! Hozz l√©tre egyet a `config.example.yaml` alapj√°n, vagy mentsd el a be√°ll√≠t√°sokat az oldals√°von. Addig is alap√©rtelmezett √©rt√©kekkel dolgozunk.")
        return default_conf
    try:
        with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
            loaded_conf = yaml.safe_load(f)
            # Biztos√≠tjuk, hogy minden kulcs l√©tezzen, ha a f√°jl hi√°nyos
            for key, value in default_conf.items():
                if key not in loaded_conf:
                    loaded_conf[key] = value
            return loaded_conf
    except Exception as e:
        st.error(f"Hiba az alap√©rtelmezett konfigur√°ci√≥ olvas√°sa k√∂zben: {e}. Alap√©rtelmezett √©rt√©kekkel dolgozunk.")
        return default_conf


def save_current_config_to_yaml(current_config, path=CONFIG_PATH):
    try:
        with open(path, 'w', encoding='utf-8') as f:
            yaml.dump(current_config, f, sort_keys=False, allow_unicode=True, Dumper=yaml.SafeDumper)
        st.sidebar.success(f"Konfigur√°ci√≥ mentve ide: {os.path.abspath(path)}")
    except Exception as e:
        st.sidebar.error(f"Hiba a konfigur√°ci√≥ ment√©se k√∂zben: {e}")


config_defaults = load_default_config()

# === Glob√°lis V√°ltoz√≥k a UI √Ållapothoz ===
base_output_for_datasets = config_defaults.get('output_base_dir', 'output')
os.makedirs(base_output_for_datasets, exist_ok=True)
temp_upload_main_dir = os.path.join(base_output_for_datasets, "temp_uploads")
os.makedirs(temp_upload_main_dir, exist_ok=True)

# === Oldals√°v a Konfigur√°ci√≥hoz ===
with st.sidebar:
    st.header("‚öôÔ∏è Feldolgoz√°si Be√°ll√≠t√°sok")

    # --- Adathalmaz M√≥d ---
    st.subheader("0. Adathalmaz C√©l")
    dataset_mode_options = ("√öj adathalmaz l√©trehoz√°sa", "Megl√©v≈ë adathalmazhoz ad√°s")
    if 'dataset_mode_radio_state' not in st.session_state:
        st.session_state.dataset_mode_radio_state = dataset_mode_options[0]

    existing_datasets_for_radio = [d for d in os.listdir(base_output_for_datasets) if
                                   os.path.isdir(os.path.join(base_output_for_datasets, d)) and d != "temp_uploads"]

    # Ha nincs megl√©v≈ë adathalmaz, √©s a "Megl√©v≈ëh√∂z ad√°s" van kiv√°lasztva, automatikusan v√°ltson "√öj"-ra
    # Ezt a radio widget `index` param√©ter√©vel kezelj√ºk
    default_radio_idx = 0
    if st.session_state.dataset_mode_radio_state == dataset_mode_options[1] and not existing_datasets_for_radio:
        st.session_state.dataset_mode_radio_state = dataset_mode_options[0]  # Friss√≠tj√ºk a state-et
        # st.rerun() # Nem sz√ºks√©ges itt, a widget indexe gondoskodik r√≥la
    elif st.session_state.dataset_mode_radio_state == dataset_mode_options[1] and existing_datasets_for_radio:
        default_radio_idx = 1

    dataset_mode = st.radio(
        "V√°lassz feldolgoz√°si m√≥dot:",
        dataset_mode_options,
        index=default_radio_idx,
        key="dataset_mode_radio_widget"  # √öj kulcs a widgetnek
    )
    # Friss√≠tj√ºk a session state-et a widget aktu√°lis √©rt√©k√©vel, ha a felhaszn√°l√≥ v√°ltoztat
    if dataset_mode != st.session_state.dataset_mode_radio_state:
        st.session_state.dataset_mode_radio_state = dataset_mode
        st.rerun()  # √öjrafuttat√°s a UI friss√≠t√©s√©hez a m√≥dv√°lt√°s ut√°n

    target_dataset_name_ui = ""
    new_dataset_name_suggestion = f"dataset_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}"

    if st.session_state.dataset_mode_radio_state == "√öj adathalmaz l√©trehoz√°sa":
        target_dataset_name_ui = st.text_input("√öj adathalmaz neve:", value=new_dataset_name_suggestion,
                                               key="new_dataset_name_input")
    else:  # Megl√©v≈ë adathalmazhoz ad√°s
        # A list√°t itt √∫jra lek√©rdezz√ºk, hogy friss legyen
        current_existing_datasets_for_selectbox = [d for d in os.listdir(base_output_for_datasets) if os.path.isdir(
            os.path.join(base_output_for_datasets, d)) and d != "temp_uploads"]
        if not current_existing_datasets_for_selectbox:
            # Ez az √°g elvileg nem futhat le, ha a radio gomb logik√°ja helyes
            st.warning(
                f"Hiba: Nincsenek megl√©v≈ë adathalmazok, de a \"Megl√©v≈ëh√∂z ad√°s\" m√≥d akt√≠v. K√©rlek, v√°lts \"√öj adathalmaz l√©trehoz√°sa\" m√≥dra.")
            target_dataset_name_ui = ""
        else:
            selected_existing_dataset = st.selectbox(
                "V√°lassz megl√©v≈ë adathalmazt:",
                options=current_existing_datasets_for_selectbox,
                index=0 if current_existing_datasets_for_selectbox else None,
                key="existing_dataset_select_box"
            )
            target_dataset_name_ui = selected_existing_dataset if selected_existing_dataset else ""

    # --- Bemenet ---
    st.subheader("1. Bemenet")
    # Session state a felt√∂lt√∂tt f√°jlokhoz √©s az el√©r√©si √∫thoz
    if 'uploaded_files_list_state' not in st.session_state:  # Lista a felt√∂lt√∂tt f√°jloknak
        st.session_state.uploaded_files_list_state = []
    if 'input_path_text_state' not in st.session_state:
        st.session_state.input_path_text_state = config_defaults.get('input_video', 'data/')


    def clear_path_if_upload():
        if st.session_state.file_uploader_widget:  # Ha van √∫j felt√∂lt√©s
            st.session_state.input_path_text_state = ""  # T√∂r√∂lj√ºk az √∫tvonalat


    def clear_upload_if_path():
        if st.session_state.path_input_widget_for_disable_check:  # Ha az √∫tvonalba √≠rtak
            st.session_state.uploaded_files_list_state = []  # T√∂r√∂lj√ºk a felt√∂lt√∂tt f√°jlokat
            # A file_uploader widgetet nem tudjuk k√∂zvetlen√ºl "ki√ºr√≠teni", de a logik√°nk a session state-re √©p√ºl


    uploaded_files_ui = st.file_uploader(
        "Vide√≥f√°jl(ok) felt√∂lt√©se (max. 200MB/f√°jl b√∂ng√©sz≈ën kereszt√ºl):",
        type=['mp4', 'mkv', 'mov', 'avi', 'webm'],
        accept_multiple_files=True,
        key="file_uploader_widget",
        disabled=bool(
            st.session_state.input_path_text_state and st.session_state.input_path_text_state.strip() and st.session_state.input_path_text_state != 'data/'),
        on_change=clear_path_if_upload
    )
    # Friss√≠tj√ºk a session state-et, ha a widget √©rt√©ke v√°ltozik
    if uploaded_files_ui is not None:  # Fontos, hogy ne None legyen, mert az is valid √©rt√©k, ha nincs felt√∂lt√©s
        st.session_state.uploaded_files_list_state = uploaded_files_ui

    input_video_path_ui_val = st.text_input(
        "Vagy add meg a vide√≥f√°jl/mappa TELJES el√©r√©si √∫tj√°t:",
        value=st.session_state.input_path_text_state,
        key="path_input_widget_for_disable_check",  # M√°sik kulcs az on_change-hez
        disabled=bool(st.session_state.uploaded_files_list_state),  # Ha van felt√∂lt√∂tt f√°jl, ez inakt√≠v
        on_change=clear_upload_if_path
    )
    # Friss√≠tj√ºk a session state-et, ha a widget √©rt√©ke v√°ltozik
    if input_video_path_ui_val != st.session_state.input_path_text_state:
        st.session_state.input_path_text_state = input_video_path_ui_val

    # --- Audio Param√©terek ---
    st.subheader("3. Audio Param√©terek")
    target_sr_ui = st.selectbox(
        "C√©l mintav√©telez√©si frekvencia (Hz):", options=[16000, 22050, 24000, 44100, 48000],
        index=[16000, 22050, 24000, 44100, 48000].index(config_defaults.get('target_sample_rate', 24000)),
        key="sample_rate_select"
    )
    language_ui = st.text_input("Nyelv (ISO k√≥d, pl. 'hu', 'en'):", value=config_defaults.get('language', 'hu'),
                                key="language_input")

    # --- Whisper Modell ---
    st.subheader("4. Whisper Modell")
    whisper_model_size_ui = st.selectbox(
        "Whisper modell m√©rete:", options=["tiny", "base", "small", "medium", "large-v1", "large-v2", "large-v3-turbo"],
        # large-v3-turbo helyett large-v3
        index=["tiny", "base", "small", "medium", "large-v1", "large-v2", "large-v3-turbo"].index(
            config_defaults.get('whisper_model_size', 'large-v3-turbo')), key="whisper_model_select"  # Jav√≠tva a defaultra
    )

    # --- Szegment√°l√°s ---
    st.subheader("5. Szegment√°l√°s")
    min_dur_ms_ui = st.number_input("Minimum szegmenshossz (ms):", min_value=500, max_value=30000,
                                    value=config_defaults.get('min_segment_duration_ms', 3000), step=100,
                                    key="min_duration_input")
    max_dur_ms_ui = st.number_input("Maximum szegmenshossz (ms):", min_value=1000, max_value=60000,
                                    value=config_defaults.get('max_segment_duration_ms', 13000), step=100,
                                    key="max_duration_input")

    # --- Opcion√°lis Funkci√≥k ---
    st.subheader("6. Opcion√°lis Funkci√≥k")
    use_demucs_ui = st.checkbox("Vok√°l izol√°ci√≥ (Demucs)", value=config_defaults.get('use_demucs', True),
                                key="use_demucs_checkbox")
    use_diarization_ui = st.checkbox("Besz√©l≈ëk sz√©tv√°laszt√°sa (Diariz√°ci√≥)",
                                     value=config_defaults.get('use_diarization', True), key="use_diarization_checkbox")
    hf_token_ui = st.text_input("Hugging Face Token (diariz√°ci√≥hoz):",
                                value=config_defaults.get('huggingface_token', 'YOUR_HUGGINGFACE_TOKEN_HERE'),
                                type="password", key="hf_token_input")

    # --- Min≈ës√©g √©s Eszk√∂z ---
    st.subheader("7. Min≈ës√©g √©s Eszk√∂z")
    confidence_threshold_ui = st.slider("Konfidencia k√ºsz√∂b (√°tirat ellen≈ërz√©shez):", min_value=0.0, max_value=1.0,
                                        value=config_defaults.get('confidence_threshold', 0.7), step=0.05,
                                        key="confidence_slider")

    device_options = ["auto", "cpu"]
    default_device_index = 0
    if torch.cuda.is_available():
        device_options.append("cuda")
        saved_device = config_defaults.get('device', 'auto')
        if saved_device in device_options: default_device_index = device_options.index(saved_device)
    elif config_defaults.get('device', 'auto') == "cpu":
        default_device_index = device_options.index("cpu")
    device_ui = st.selectbox("Eszk√∂z (CPU/GPU):", options=device_options, index=default_device_index,
                             key="device_select_box")

    if st.button("Jelenlegi be√°ll√≠t√°sok ment√©se config.yaml-ba", key="save_config_sidebar_button"):
        current_config_for_save = {
            'input_video': st.session_state.input_path_text_state,
            'output_base_dir': base_output_for_datasets,
            'output_raw_audio_filename': config_defaults.get('output_raw_audio_filename'),
            'output_clean_audio_filename': config_defaults.get('output_clean_audio_filename'),
            'output_segments_dirname': config_defaults.get('output_segments_dirname'),
            'output_metadata_filename': config_defaults.get('output_metadata_filename'),
            'target_sample_rate': target_sr_ui, 'language': language_ui,
            'whisper_model_size': whisper_model_size_ui,
            'min_segment_duration_ms': min_dur_ms_ui, 'max_segment_duration_ms': max_dur_ms_ui,
            'use_demucs': use_demucs_ui, 'use_diarization': use_diarization_ui,
            'huggingface_token': hf_token_ui, 'confidence_threshold': confidence_threshold_ui,
            'device': device_ui,
            'output_dir_structure': 'speaker_separated' if use_diarization_ui else 'flat'
        }
        save_current_config_to_yaml(current_config_for_save)

# === F≈ë Tartalom - Feldolgoz√°s Ind√≠t√°sa ===
st.markdown("---")

# A v√©gleges adathalmaz nev√©nek meghat√°roz√°sa a widgetek aktu√°lis √°llapot√°b√≥l
# Ezt minden renderel√©skor √∫jra kell sz√°molni
# El≈ësz√∂r lek√©rdezz√ºk a megl√©v≈ë adathalmazokat, hogy a logika helyes legyen
current_existing_datasets_for_button_logic = [
    d for d in os.listdir(base_output_for_datasets)
    if os.path.isdir(os.path.join(base_output_for_datasets, d)) and d != "temp_uploads"
]

final_target_dataset_name_for_button_logic = ""
if st.session_state.dataset_mode_radio_state == "√öj adathalmaz l√©trehoz√°sa":
    final_target_dataset_name_for_button_logic = st.session_state.get("new_dataset_name_input", new_dataset_name_suggestion)
    # Ha a fallback input mez≈ë volt akt√≠v (mert nem volt megl√©v≈ë dataset, √©s a "Megl√©v≈ë" m√≥d volt a radio gombon)
    if not current_existing_datasets_for_button_logic and "new_dataset_name_if_none_exist_for_existing_mode" in st.session_state:
        final_target_dataset_name_for_button_logic = st.session_state.new_dataset_name_if_none_exist_for_existing_mode

elif current_existing_datasets_for_button_logic and "existing_dataset_select_box" in st.session_state:
    # Csak akkor olvassuk ki a selectbox √©rt√©k√©t, ha t√©nyleg vannak megl√©v≈ë adathalmazok
    final_target_dataset_name_for_button_logic = st.session_state.existing_dataset_select_box
# Ha "Megl√©v≈ë" van kiv√°lasztva, de val√≥j√°ban nincs megl√©v≈ë (√©s a fallback inputot haszn√°ljuk)
elif not current_existing_datasets_for_button_logic and "new_dataset_name_if_none_exist_for_existing_mode" in st.session_state:
    final_target_dataset_name_for_button_logic = st.session_state.new_dataset_name_if_none_exist_for_existing_mode


process_button_disabled_final = not final_target_dataset_name_for_button_logic or not final_target_dataset_name_for_button_logic.strip()
button_tooltip_final = "K√©rlek, adj meg/v√°lassz egy adathalmaz nevet az oldals√°von!" if process_button_disabled_final else "Ind√≠tsd el az √∂sszes vide√≥ feldolgoz√°s√°t a be√°ll√≠tott adathalmazhoz."

if st.button("üöÄ Teljes Feldolgoz√°s Ind√≠t√°sa", type="primary", use_container_width=True, key="start_processing_main_button", disabled=process_button_disabled_final, help=button_tooltip_final):
    actual_output_dataset_dir = os.path.join(base_output_for_datasets, final_target_dataset_name_for_button_logic)
    os.makedirs(actual_output_dataset_dir, exist_ok=True)
    st.info(f"Kimenetek ment√©se a k√∂vetkez≈ë adathalmaz mapp√°ba: **{os.path.abspath(actual_output_dataset_dir)}**")

    runtime_config = {
        'output_base_dir': actual_output_dataset_dir,
        'output_raw_audio_filename': config_defaults.get('output_raw_audio_filename', 'audio_raw.wav'),
        'output_clean_audio_filename': config_defaults.get('output_clean_audio_filename', 'audio_clean.wav'),
        'output_segments_dirname': config_defaults.get('output_segments_dirname', 'segments'),
        'output_metadata_filename': config_defaults.get('output_metadata_filename', 'metadata.csv'),
        'output_metadata_filename': config_defaults.get('output_metadata_filename', 'metadata.csv'),
        'target_sample_rate': target_sr_ui, 'language': language_ui,
        'whisper_model_size': whisper_model_size_ui,
        'min_segment_duration_ms': min_dur_ms_ui, 'max_segment_duration_ms': max_dur_ms_ui,
        'use_demucs': use_demucs_ui, 'use_diarization': use_diarization_ui,
        'huggingface_token': hf_token_ui if hf_token_ui and hf_token_ui.strip() and hf_token_ui != 'YOUR_HUGGINGFACE_TOKEN_HERE' else None,
        'confidence_threshold': confidence_threshold_ui, 'device': device_ui,
        'output_dir_structure': 'speaker_separated' if use_diarization_ui else 'flat'
    }

    videos_to_process = []
    temp_uploaded_paths = []

    current_uploaded_files_from_state = st.session_state.get('uploaded_files_list_state', [])
    current_input_path_from_state = st.session_state.get('input_path_text_state', '')

    if current_uploaded_files_from_state:
        for uploaded_file_item in current_uploaded_files_from_state:
            temp_video_path = os.path.join(temp_upload_main_dir, uploaded_file_item.name)
            with open(temp_video_path, "wb") as f: f.write(uploaded_file_item.getbuffer())
            videos_to_process.append(temp_video_path)
            temp_uploaded_paths.append(temp_video_path)
        st.info(f"{len(current_uploaded_files_from_state)} vide√≥ felt√∂ltve feldolgoz√°sra.")
    elif current_input_path_from_state and current_input_path_from_state.strip() and current_input_path_from_state != 'data/':
        path_to_check = current_input_path_from_state
        if not os.path.isabs(path_to_check): path_to_check = os.path.abspath(path_to_check)
        if os.path.isdir(path_to_check):
            st.info(f"Vide√≥k keres√©se a '{path_to_check}' mapp√°ban...")
            for filename in os.listdir(path_to_check):
                if filename.lower().endswith(('.mp4', '.mkv', '.mov', '.avi', '.webm')):
                    videos_to_process.append(os.path.join(path_to_check, filename))
            if not videos_to_process:
                st.warning(f"Nem tal√°lhat√≥ak vide√≥f√°jlok a '{path_to_check}' mapp√°ban.")
            else:
                st.info(f"{len(videos_to_process)} vide√≥ tal√°lhat√≥ a mapp√°ban.")
        elif os.path.isfile(path_to_check):
            videos_to_process.append(path_to_check)
        else:
            st.error(f"A megadott el√©r√©si √∫t nem l√©tezik vagy nem t√°mogatott: {path_to_check}"); st.stop()
    else:
        st.error("Nincs vide√≥ kiv√°lasztva vagy √©rv√©nyes el√©r√©si √∫t megadva."); st.stop()

    if not videos_to_process: st.error("Nincsenek feldolgozand√≥ vide√≥k."); st.stop()

    log_placeholder = st.empty()
    progress_bar_overall = st.progress(0, text="Teljes feldolgoz√°s...")
    all_videos_processed_successfully = True

    for video_index, current_video_path_original in enumerate(videos_to_process):
        video_basename = os.path.basename(current_video_path_original)
        log_placeholder.info(f"Feldolgoz√°s alatt: {video_basename} ({video_index + 1}/{len(videos_to_process)})")
        safe_video_name = "".join(c if c.isalnum() else "_" for c in os.path.splitext(video_basename)[0])
        video_processing_output_dir = os.path.join(actual_output_dataset_dir, safe_video_name)
        os.makedirs(video_processing_output_dir, exist_ok=True)

        video_config = runtime_config.copy()
        video_config['input_video'] = current_video_path_original
        video_config['output_base_dir'] = video_processing_output_dir
        video_config['output_metadata_file_absolute_path'] = os.path.join(actual_output_dataset_dir,
                                                                          runtime_config['output_metadata_filename'])
        video_config['segments_relative_path_prefix'] = safe_video_name

        st.info(f"Indul: {video_basename}")
        st.caption(f"Kimenetek (nyers, tiszta, szegmensek) ide: {os.path.abspath(video_config['output_base_dir'])}")

        raw_audio_file = None;
        clean_audio_file_for_this_video = None;
        input_for_transcription_this_video = None
        current_video_success = True

        with st.expander(f"[{safe_video_name}] 1. Audio kinyer√©se...", expanded=True):
            if not check_ffmpeg():
                st.error("FFmpeg nem tal√°lhat√≥.");
                current_video_success = False
            if current_video_success:
                raw_audio_file = extract_audio_from_video(video_config)
                if raw_audio_file:
                    st.success(f"Nyers audio: {os.path.basename(raw_audio_file)}")
                else:
                    st.error("Audio kinyer√©s sikertelen."); current_video_success = False

        if current_video_success and video_config['use_demucs']:
            with st.expander(f"[{safe_video_name}] 2. Vok√°l izol√°ci√≥ (Demucs)...", expanded=True):
                clean_audio_file_for_this_video = isolate_vocals_with_demucs(video_config, raw_audio_file)
                if clean_audio_file_for_this_video:
                    st.success(f"Tiszta vok√°l: {os.path.basename(clean_audio_file_for_this_video)}")
                    input_for_transcription_this_video = clean_audio_file_for_this_video
                else:
                    st.warning("Demucs hiba. Nyers audi√≥ haszn√°lata.")
                    input_for_transcription_this_video = raw_audio_file
        elif current_video_success:
            st.info(f"[{safe_video_name}] Demucs kihagyva.")
            input_for_transcription_this_video = raw_audio_file

        if current_video_success and input_for_transcription_this_video:
            with st.expander(f"[{safe_video_name}] 3. Transzkripci√≥ √©s szegment√°l√°s...", expanded=True):
                st.write(f"WhisperX futtat√°sa: {os.path.basename(input_for_transcription_this_video)}")
                transcribe_and_segment(video_config)
                st.success("Transzkripci√≥ √©s szegment√°l√°s befejezve ehhez a vide√≥hoz!")
        elif current_video_success:
            st.error(f"[{safe_video_name}] Nincs audio f√°jl a transzkripci√≥hoz.");
            current_video_success = False

        if not current_video_success:
            all_videos_processed_successfully = False

        progress_bar_overall.progress((video_index + 1) / len(videos_to_process),
                                      text=f"Vide√≥ {video_index + 1}/{len(videos_to_process)} feldolgozva.")

    if temp_uploaded_paths:
        st.markdown("---");
        st.write("Ideiglenes felt√∂lt√∂tt f√°jlok t√∂rl√©se...")
        for temp_path in temp_uploaded_paths:
            if os.path.exists(temp_path):
                try:
                    os.remove(temp_path); st.caption(f"T√∂r√∂lve: {temp_path}")
                except Exception as e:
                    st.warning(f"Hiba t√∂rl√©skor ({temp_path}): {e}")
        if os.path.exists(temp_upload_main_dir) and not os.listdir(temp_upload_main_dir):
            try:
                shutil.rmtree(temp_upload_main_dir); st.caption(f"Ideiglenes mappa t√∂r√∂lve: {temp_upload_main_dir}")
            except Exception as e:
                st.warning(f"Hiba az ideiglenes mappa t√∂rl√©sekor: {e}")

    st.markdown("---")
    if videos_to_process:
        if all_videos_processed_successfully:
            st.balloons()
            st.header("üéâ Feldolgoz√°s Befejezve! üéâ")
            st.success(f"Az √∂sszes vide√≥ feldolgoz√°sa sikeresen megt√∂rt√©nt.")
        else:
            st.warning(
                "Egy vagy t√∂bb vide√≥ feldolgoz√°sa sor√°n hiba t√∂rt√©nt. Ellen≈ërizd a fenti √ºzeneteket √©s a termin√°l logjait.")
        st.write(
            f"A k√∂z√∂s metaadatok (√°tiratok) a `{os.path.abspath(os.path.join(actual_output_dataset_dir, runtime_config['output_metadata_filename']))}` f√°jlban tal√°lhat√≥k.")
        st.write(
            f"A szegment√°lt audio f√°jlok a `{os.path.abspath(actual_output_dataset_dir)}` mapp√°n bel√ºli, vide√≥ nev≈± almapp√°kban (`segments` almapp√°kon bel√ºl) vannak.")
    else:
        st.info("Nem volt feldolgozand√≥ vide√≥.")

with st.sidebar:
    st.markdown("---")
    st.info("Fejlesztette: AI Asszisztens")
